parameters:
  - name: agentPool
    type: string
    default: Azure Pipelines
    values:
      - "Azure Pipelines"
      - "Slovink-Selfhosted-Agent"
  - name: destroy
    type: string
    values:
      - "true"
      - "false"
  - name: apply_flag
    type: string
    values:
      - "true"
      - "false"

trigger:
- main

variables:
- name: gcp_bucket
  value: slovink-hyperscaler
- name: terraformVersion
  value : 1.5.4
- name: authenticationFileName
  value: slovink-hyperscaler.json
- name: projectName
  value: "Slovink hyperscaler"
- name: projectId
  value: "slovink-hyperscaler"
- name: platformName
  value: "google"
- name: environment
  value: "development"
- name: region
  value: "us-east1"
- name: zone
  value: "us-east1-b"
- name: agentPoolName
  value:  ${{ parameters.agentPool }}
- name: destroy
  value: ${{ parameters.destroy }}
- name: apply_flag
  value: ${{ parameters.apply_flag }}
pool:
  name: $(agentPoolName)


stages:
  - stage: Prepare
    displayName: Initialization
    jobs:
    - job: prepare
      steps:
      - task: TerraformInstaller@1
        displayName: install terraform
        inputs:
          terraformVersion: latest
      - script:
          rm -rf *
      - task: DownloadSecureFile@1
        name: development
        displayName: 'get GCP Secrets '
        inputs:
           secureFile: $(authenticationFileName)
      - script: |
          cp $(development.secureFilePath) .

  - stage: Network
    dependsOn: Prepare
    displayName: Network
    jobs:
    - job: Network
      steps:
      - task: TerraformCLI@0
        displayName: Terraform Initialize
        inputs:
          command: init
          workingDirectory: $(System.DefaultWorkingDirectory)/example
          backendType: gcs
          backendGcsCredentials: $(AuthenticationFileName)
          backendGcsBucket: $(gcp_bucket)
          backendGcsPrefix: $(ProjectId)/$(PlatformName)/network.infrax.tfstate
      - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        displayName: 'Terraform Plan'
        inputs:
          command: plan
          workingDirectory: $(System.DefaultWorkingDirectory)/example
          # Google Credentials (i.e. for service account) in JSON file format in Azure DevOps Secure Files
          providerGoogleCredentials: $(AuthenticationFileName)
          # The default project name where resources are managed. Defining project on a resource takes precedence over this.
          providerGoogleProject: $(ProjectName)
          # The default region where resources are managed. Defining region on a resource takes precedence over this.
          providerGoogleRegion: $(Region)
          commandOptions: '-var-file="$(System.DefaultWorkingDirectory)/terraform.tfvars"'
          
      - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        condition: eq(variables['apply'], 'true')
        displayName: 'terraform Apply'
        inputs:
          command: apply
          workingDirectory: $(System.DefaultWorkingDirectory)/example
          # Google Credentials (i.e. for service account) in JSON file format in Azure DevOps Secure Files
          providerGoogleCredentials: $(AuthenticationFileName)
          # The default project name where resources are managed. Defining project on a resource takes precedence over this.
          providerGoogleProject: $(ProjectName)
          # The default region where resources are managed. Defining region on a resource takes precedence over this.
          providerGoogleRegion: $(Region)
          commandOptions: '-var-file="$(System.DefaultWorkingDirectory)/terraform.tfvars"'

      - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
        condition: eq(variables['destroy'], 'true')
        displayName: 'Terraform Destroy'
        inputs:
          command: destroy
          workingDirectory: $(System.DefaultWorkingDirectory)/example
          providerGoogleCredentials: $(AuthenticationFileName)
          providerGoogleProject: $(ProjectName)
          providerGoogleRegion: $(Region)
          commandOptions: '-var-file="$(System.DefaultWorkingDirectory)/terraform.tfvars" -auto-approve'


   
    # - job: DestroyNetwork
    #   steps:   
    #   - task: TerraformCLI@0
    #     displayName: Terraform Initialize
    #     inputs:
    #       command: init
    #       workingDirectory: $(System.DefaultWorkingDirectory)/example
    #       backendType: gcs
    #       backendGcsCredentials: $(AuthenticationFileName)
    #       backendGcsBucket: $(gcp_bucket)
    #       backendGcsPrefix: $(ProjectId)/$(PlatformName)/kubernetes.infrax.tfstate

    #   - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    #     displayName: 'Terraform destroy'
    #     inputs:
    #       command: destroy
    #       workingDirectory: $(System.DefaultWorkingDirectory)/exa
    #       # Google Credentials (i.e. for service account) in JSON file format in Azure DevOps Secure Files
    #       providerGoogleCredentials: $(AuthenticationFileName)
    #       # The default project name where resources are managed. Defining project on a resource takes precedence over this.
    #       providerGoogleProject: $(ProjectName)
    #       # The default region where resources are managed. Defining region on a resource takes precedence over this.
    #       providerGoogleRegion: $(Region)
    #       commandOptions: '-var "platformName=$(platformName)" -var "projectId=$(ProjectId)"  -var "projectName=$(projectName)" -var "region=${Region)"'
